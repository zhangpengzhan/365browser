apply plugin: 'com.android.application'

android {
    signingConfigs {
        releaseconfig {
            //storeFile file('/home/alex/github/365browser/keystore')
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileSdkVersion 25
//    buildToolsVersion '26.0.2'
//    enforceUniquePackageName false
    defaultConfig {
        applicationId "com.mogoweb.browser"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 16
        versionName "6.0.0"

        multiDexEnabled true
    }

    sourceSets {
        main {
            java.filter.exclude(
                    "com/google/protobuf/*.java",
                    "com/google/protobuf/micro/*.java",
                    "org/chromium/chrome/browser/MonochromeApplication.java",
            )
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"
    }
    aaptOptions {
        noCompress "dat", "bin", "pak"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:support-annotations:25.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:gridlayout-v7:25.3.1'
    compile 'com.android.support:support-v13:25.3.1'
    compile 'com.android.support:multidex:1.0.0'
    compile project(':libraries:chrome_res')
    compile project(':libraries:ui_res')
    compile project(':libraries:content_res')
    compile project(":libraries:delegate_res")
    compile project(":libraries:gms_res")
    compile project(':libraries:autofill_res')
    compile project(':libraries:media_res')
}

afterEvaluate {
    def tasksToDisable = tasks.findAll {
        return (it.name.equals('generateDebugSources')  // causes unwanted AndroidManifest.java
                || it.name.equals('generateReleaseSources')
                || it.name.endsWith('BuildConfig')  // causes unwanted BuildConfig.java
                || it.name.endsWith('Aidl')
                || it.name.endsWith('Renderscript')
                || it.name.endsWith('Shaders'))
    }
    tasksToDisable.each { Task task ->
        task.enabled = false
    }
}
